import discord
import json
from discord.ext import commands
from discord import app_commands
import time
import os

TOKEN = os.getenv("token")  # L·∫•y TOKEN t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
ADMIN_CHANNEL_ID = 1350681415095816255  # Thay b·∫±ng ID k√™nh Discord admin ƒë·ªÉ bot g·ª≠i tin nh·∫Øn
STOCK_FILE = "stock.json"
LEGIT_FILE = "legit.json"
BUYER_ROLE_ID = 1340669678951071827
intents = discord.Intents.default()
bot = commands.Bot(command_prefix="!", intents=intents)

# Dictionary ƒë·ªÉ l∆∞u th√¥ng tin giao d·ªãch
bot.transaction_data = {}

class NapThe(discord.ui.Modal, title="N·∫°p Th·∫ª C√†o"):
    loai = discord.ui.TextInput(label="Lo·∫°i th·∫ª (Viettel, Vinaphone, Mobifone)", required=True)
    menhgia = discord.ui.TextInput(label="M·ªánh gi√° (VD: 100000)", required=True)
    mathe = discord.ui.TextInput(label="M√£ th·∫ª", required=True)
    seri = discord.ui.TextInput(label="S·ªë seri", required=True)

    async def on_submit(self, interaction: discord.Interaction):
        admin_channel = bot.get_channel(ADMIN_CHANNEL_ID)

        if admin_channel:
            embed = discord.Embed(
                title="üì© Y√™u C·∫ßu N·∫°p Th·∫ª",
                description=f"**Ng∆∞·ªùi g·ª≠i:** {interaction.user.mention}\n"
                            f"**Lo·∫°i th·∫ª:** {self.loai.value}\n"
                            f"**M·ªánh gi√°:** {self.menhgia.value} VNƒê\n"
                            f"**M√£ th·∫ª:** `{self.mathe.value}`\n"
                            f"**S·ªë seri:** `{self.seri.value}`",
                color=discord.Color.blue()
            )
            await admin_channel.send(embed=embed)
            await interaction.response.send_message("‚úÖ **Th√¥ng tin th·∫ª ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn admin!** Vui l√≤ng ch·ªù x·ª≠ l√Ω.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ö† **Kh√¥ng t√¨m th·∫•y k√™nh admin ƒë·ªÉ g·ª≠i tin nh·∫Øn!**", ephemeral=True)

class ChuyenKhoan(discord.ui.Modal, title="Chuy·ªÉn Kho·∫£n Ng√¢n H√†ng"):
    bank_name = discord.ui.TextInput(label="T√™n ng√¢n h√†ng (VD: Vietcombank, Momo, MB)", required=True)
    amount = discord.ui.TextInput(label="S·ªë ti·ªÅn (VD: 200000)", required=True)
    trans_id = discord.ui.TextInput(label="M√£ giao d·ªãch", required=True)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            admin_channel = bot.get_channel(ADMIN_CHANNEL_ID)
            if not admin_channel:
                await interaction.response.send_message("‚ö† **Kh√¥ng t√¨m th·∫•y k√™nh admin ƒë·ªÉ g·ª≠i tin nh·∫Øn!**", ephemeral=True)
                return
            
            # G·ª≠i tin nh·∫Øn h∆∞·ªõng d·∫´n user g·ª≠i ·∫£nh x√°c nh·∫≠n
            msg = await interaction.channel.send(
                f"{interaction.user.mention} ‚úÖ **Th√¥ng tin ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n!** "
                "Vui l√≤ng g·ª≠i ·∫£nh h√≥a ƒë∆°n giao d·ªãch b·∫±ng c√°ch **reply** tin nh·∫Øn n√†y v·ªõi ·∫£nh c·ªßa b·∫°n."
            )

            # L∆∞u ID tin nh·∫Øn bot g·ª≠i ƒë·ªÉ ki·ªÉm tra reply sau n√†y
            bot.transaction_data[interaction.user.id] = {
                "user": interaction.user.mention,
                "bank": self.bank_name.value,
                "amount": self.amount.value,
                "trans_id": self.trans_id.value,
                "msg_id": msg.id  # L∆∞u ID tin nh·∫Øn n√†y
            }

            await interaction.response.send_message("‚úÖ **Th√¥ng tin ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n!** Vui l√≤ng g·ª≠i ·∫£nh x√°c nh·∫≠n.", ephemeral=True)

        except Exception as e:
            await interaction.response.send_message(f"‚ùå **ƒê√£ x·∫£y ra l·ªói:** {str(e)}", ephemeral=True)


@bot.tree.command(name="bank", description="N·∫°p ti·ªÅn qua ng√¢n h√†ng, y√™u c·∫ßu g·ª≠i ·∫£nh h√≥a ƒë∆°n giao d·ªãch.")
async def bank(interaction: discord.Interaction):
    await interaction.response.send_modal(ChuyenKhoan())

@bot.event
async def on_message(message):
    if message.author.bot:
        return

    if message.author.id in bot.transaction_data and message.attachments:
        admin_channel = bot.get_channel(ADMIN_CHANNEL_ID)
        data = bot.transaction_data.pop(message.author.id)  # L·∫•y th√¥ng tin giao d·ªãch

        embed = discord.Embed(
            title="üì© Y√™u C·∫ßu Chuy·ªÉn Kho·∫£n",
            description=f"**Ng∆∞·ªùi g·ª≠i:** {data['user']}\n"
                        f"**Ng√¢n h√†ng:** {data['bank']}\n"
                        f"**S·ªë ti·ªÅn:** {data['amount']} VNƒê\n"
                        f"**M√£ giao d·ªãch:** `{data['trans_id']}`",
            color=discord.Color.green()
        )

        if admin_channel:
            # G·ª≠i th√¥ng tin giao d·ªãch tr∆∞·ªõc
            await admin_channel.send(embed=embed)

            for attachment in message.attachments:
                # T·∫°o embed ch·ª©a ·∫£nh
                image_embed = discord.Embed(
                    title="üì∏ ·∫¢nh Giao D·ªãch",
                    color=discord.Color.blue()
                )
                image_embed.set_image(url=attachment.url)

                # G·ª≠i embed ·∫£nh l√™n admin
                await admin_channel.send(embed=image_embed)
            
            # X√≥a tin nh·∫Øn ng∆∞·ªùi d√πng v√† tin nh·∫Øn bot tr∆∞·ªõc ƒë√≥
            time.sleep(5)
            await message.delete()
            try:
                msg = await message.channel.fetch_message(data["msg_id"])  # L·∫•y tin nh·∫Øn bot ƒë√£ g·ª≠i
                await msg.delete()
            except discord.NotFound:
                pass  # N·∫øu tin nh·∫Øn bot kh√¥ng c√≤n, b·ªè qua l·ªói

            await message.channel.send("‚úÖ **·∫¢nh ƒë√£ ƒë∆∞·ª£c g·ª≠i l√™n admin!** Vui l√≤ng ch·ªù x√°c nh·∫≠n.", delete_after=5)
        else:
            await message.channel.send("‚ö† **Kh√¥ng t√¨m th·∫•y k√™nh admin ƒë·ªÉ g·ª≠i tin nh·∫Øn!**", delete_after=5)


# H√†m t·∫£i d·ªØ li·ªáu stock t·ª´ file (lu√¥n c·∫≠p nh·∫≠t m·ªói l·∫ßn l·ªánh ƒë∆∞·ª£c d√πng)
def load_stock():
    try:
        with open(STOCK_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}  # Tr·∫£ v·ªÅ dict r·ªóng n·∫øu file l·ªói

# H√†m l∆∞u stock v√†o file
def save_stock(stock_data):
    with open(STOCK_FILE, "w", encoding="utf-8") as file:
        json.dump(stock_data, file, indent=4, ensure_ascii=False)

class StockSelect(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=60)  # H·∫øt h·∫°n sau 60s
        self.update_options()

    def update_options(self):
        stock_data = load_stock()  # Load d·ªØ li·ªáu m·ªõi nh·∫•t
        self.clear_items()
        options = [
            discord.SelectOption(label=item, description=f"C√≤n {quantity} c√°i", value=item)
            for item, quantity in stock_data.items()
        ]
        self.select = discord.ui.Select(placeholder="Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ ki·ªÉm tra", options=options)
        self.select.callback = self.select_callback
        self.add_item(self.select)

    async def select_callback(self, interaction: discord.Interaction):
        stock_data = load_stock()  # Load l·∫°i stock m·ªõi nh·∫•t
        product = self.select.values[0]
        quantity = stock_data.get(product, 0)

        embed = discord.Embed(
            title="üì¶ Ki·ªÉm Tra Stock",
            description=f"üîπ **{product}**: C√≤n `{quantity}` c√°i trong kho.",
            color=discord.Color.green()
        )
        await interaction.response.edit_message(embed=embed, view=self)

@bot.tree.command(name="stock", description="Ki·ªÉm tra s·ªë l∆∞·ª£ng h√†ng trong kho.")
async def stock(interaction: discord.Interaction):
    await interaction.response.send_message("üìã **Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ ki·ªÉm tra stock:**", view=StockSelect(), ephemeral=True)
ADMIN_ID = 1219200091777269792  # Thay b·∫±ng ID Discord c·ªßa b·∫°n

@bot.tree.command(name="update_stock", description="C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng h√†ng h√≥a trong kho (Admin).")
@app_commands.describe(product="T√™n s·∫£n ph·∫©m", quantity="S·ªë l∆∞·ª£ng m·ªõi")
async def update_stock(interaction: discord.Interaction, product: str, quantity: int):
    if interaction.user.id != ADMIN_ID:  # Ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i admin
        await interaction.response.send_message("‚õî **B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!**", ephemeral=True)
        return

    if quantity < 0:
        await interaction.response.send_message("‚ö† S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!", ephemeral=True)
        return
    
    stock_data = load_stock()
    stock_data[product] = quantity
    save_stock(stock_data)

    embed = discord.Embed(
        title="‚úÖ C·∫≠p Nh·∫≠t Stock Th√†nh C√¥ng!",
        description=f"üîπ **{product}**: C√≤n `{quantity}` c√°i trong kho.",
        color=discord.Color.green()
    )
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="delete_stock", description="X√≥a s·∫£n ph·∫©m kh·ªèi kho (Admin).")
@app_commands.describe(product="T√™n s·∫£n ph·∫©m c·∫ßn x√≥a")
async def delete_stock(interaction: discord.Interaction, product: str):
    if interaction.user.id != ADMIN_ID:  # Ki·ªÉm tra quy·ªÅn admin
        await interaction.response.send_message("‚õî **B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!**", ephemeral=True)
        return

    stock_data = load_stock()

    if product not in stock_data:
        await interaction.response.send_message(f"‚ö† **S·∫£n ph·∫©m `{product}` kh√¥ng c√≥ trong kho!**", ephemeral=True)
        return

    del stock_data[product]  # X√≥a s·∫£n ph·∫©m kh·ªèi dictionary
    save_stock(stock_data)  # L∆∞u l·∫°i d·ªØ li·ªáu

    embed = discord.Embed(
        title="üóëÔ∏è X√≥a S·∫£n Ph·∫©m Th√†nh C√¥ng!",
        description=f"üîπ **{product}** ƒë√£ ƒë∆∞·ª£c **x√≥a kh·ªèi kho**.",
        color=discord.Color.red()
    )
    await interaction.response.send_message(embed=embed, ephemeral=True)

# H√†m t·∫£i d·ªØ li·ªáu legit t·ª´ file
def load_legit():
    try:
        with open(LEGIT_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"store": 0}

# H√†m l∆∞u d·ªØ li·ªáu legit v√†o file
def save_legit(data):
    with open(LEGIT_FILE, "w") as f:
        json.dump(data, f, indent=4)

@bot.tree.command(name="legit", description="Xem s·ªë legit c·ªßa c·ª≠a h√†ng.")
async def legit(interaction: discord.Interaction):
    legit_data = load_legit()
    store_legit = legit_data.get("store", 0)
    
    embed = discord.Embed(
        title="‚úÖ Legit Store ‚úÖ",
        description=f"S·ªë legit hi·ªán t·∫°i c·ªßa c·ª≠a h√†ng: `{store_legit}`",
        color=discord.Color.blue()
    )
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="add_legit", description="Th√™m legit cho ng∆∞·ªùi d√πng (Ch·ªâ admin ho·∫∑c buyer)")
async def add_legit(interaction: discord.Interaction, user: discord.Member):
    if interaction.user.id != ADMIN_ID and not any(role.id == BUYER_ROLE_ID for role in interaction.user.roles):
        await interaction.response.send_message("üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return
    
    legit_data = load_legit()
    legit_data[str(user.id)] = legit_data.get(str(user.id), 0) + 1
    legit_data["store"] = legit_data.get("store", 0) + 1
    save_legit(legit_data)
    
    await interaction.response.send_message(f"‚úÖ **{user.mention} ƒë√£ nh·∫≠n ƒë∆∞·ª£c 1 legit t·ª´ {interaction.user.mention}!**")
@bot.event
async def on_ready():
    global stock_data
    stock_data = load_stock()  # C·∫≠p nh·∫≠t stock khi bot online
    await bot.tree.sync()  # ƒê·ªìng b·ªô Slash Command
    print(f'‚úÖ Bot {bot.user} ƒë√£ s·∫µn s√†ng!')


@bot.tree.command(name="napthe", description="G·ª≠i y√™u c·∫ßu n·∫°p th·∫ª l√™n admin.")
async def napthe(interaction: discord.Interaction):
    await interaction.response.send_modal(NapThe())

bot.run(TOKEN)
