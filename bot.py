import discord
import json
from discord.ext import commands
from discord import app_commands
import time
import os

TOKEN = os.getenv("token")
ADMIN_CHANNEL_ID = 1350681415095816255
STOCK_FILE = "stock.json"
SOURCE_FILE = "source.json"
LEGIT_FILE = "legit.json"
BUYER_ROLE_ID = 1340669678951071827
ADMIN_ID = 1219200091777269792

intents = discord.Intents.default()
bot = commands.Bot(command_prefix="!", intents=intents)

bot.transaction_data = {}

def load_json(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_json(file_path, data):
    with open(file_path, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4, ensure_ascii=False)

class StockSelect(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=60)
        self.update_options()

    def update_options(self):
        stock_data = load_json(STOCK_FILE)
        self.clear_items()
        options = [
            discord.SelectOption(label=item, description=f"C√≤n {quantity} c√°i", value=item)
            for item, quantity in stock_data.items()
        ]
        self.select = discord.ui.Select(placeholder="Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ ki·ªÉm tra", options=options)
        self.select.callback = self.select_callback
        self.add_item(self.select)

    async def select_callback(self, interaction: discord.Interaction):
        stock_data = load_json(STOCK_FILE)
        product = self.select.values[0]
        quantity = stock_data.get(product, 0)

        embed = discord.Embed(
            title="üì¶ Ki·ªÉm Tra Stock",
            description=f"üîπ **{product}**: C√≤n `{quantity}` c√°i trong kho.",
            color=discord.Color.green()
        )
        await interaction.response.edit_message(embed=embed, view=self)

@bot.tree.command(name="stock", description="Ki·ªÉm tra s·ªë l∆∞·ª£ng h√†ng trong kho.")
async def stock(interaction: discord.Interaction):
    await interaction.response.send_message("üìã **Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ ki·ªÉm tra stock:**", view=StockSelect(), ephemeral=True)

@bot.tree.command(name="update_stock", description="C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng h√†ng h√≥a trong kho (Admin).")
@app_commands.describe(product="T√™n s·∫£n ph·∫©m", quantity="S·ªë l∆∞·ª£ng m·ªõi")
async def update_stock(interaction: discord.Interaction, product: str, quantity: int):
    if interaction.user.id != ADMIN_ID:
        await interaction.response.send_message("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return
    
    if quantity < 0:
        await interaction.response.send_message("‚ö† S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!", ephemeral=True)
        return
    
    stock_data = load_json(STOCK_FILE)
    stock_data[product] = quantity
    save_json(STOCK_FILE, stock_data)

    embed = discord.Embed(
        title="‚úÖ C·∫≠p Nh·∫≠t Stock Th√†nh C√¥ng!",
        description=f"üîπ **{product}**: C√≤n `{quantity}` c√°i trong kho.",
        color=discord.Color.green()
    )
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="delete_stock", description="X√≥a s·∫£n ph·∫©m kh·ªèi kho (Admin).")
@app_commands.describe(product="T√™n s·∫£n ph·∫©m c·∫ßn x√≥a")
async def delete_stock(interaction: discord.Interaction, product: str):
    if interaction.user.id != ADMIN_ID:
        await interaction.response.send_message("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return

    stock_data = load_json(STOCK_FILE)

    if product not in stock_data:
        await interaction.response.send_message(f"‚ö† **S·∫£n ph·∫©m `{product}` kh√¥ng c√≥ trong kho!**", ephemeral=True)
        return

    del stock_data[product]
    save_json(STOCK_FILE, stock_data)

    embed = discord.Embed(
        title="üóëÔ∏è X√≥a S·∫£n Ph·∫©m Th√†nh C√¥ng!",
        description=f"üîπ **{product}** ƒë√£ ƒë∆∞·ª£c **x√≥a kh·ªèi kho**.",
        color=discord.Color.red()
    )
    await interaction.response.send_message(embed=embed, ephemeral=True)

class SourceSelect(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=60)
        self.update_options()

    def update_options(self):
        source_data = load_json(SOURCE_FILE)
        self.clear_items()
        options = [
            discord.SelectOption(label=item, description=f"C√≤n {quantity} c√°i", value=item, emoji="üì¶")
            for item, quantity in source_data.items()
        ]
        self.select = discord.ui.Select(placeholder="Ch·ªçn source ƒë·ªÉ ki·ªÉm tra", options=options)
        self.select.callback = self.select_callback
        self.add_item(self.select)

    async def select_callback(self, interaction: discord.Interaction):
        source_data = load_json(SOURCE_FILE)
        product = self.select.values[0]
        quantity = source_data.get(product, 0)

        embed = discord.Embed(
            title="üì¶ Ki·ªÉm Tra Source",
            description=f"üîπ **{product}**: C√≤n `{quantity}` c√°i trong kho.",
            color=discord.Color.green()
        )
        await interaction.response.edit_message(embed=embed, view=self)

@bot.tree.command(name="source", description="Ki·ªÉm tra s·ªë l∆∞·ª£ng source c√≥ s·∫µn.")
async def source(interaction: discord.Interaction):
    await interaction.response.send_message("üìã **Ch·ªçn source ƒë·ªÉ ki·ªÉm tra:**", view=SourceSelect(), ephemeral=True)

@bot.tree.command(name="update_source", description="C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng source (Admin).")
@app_commands.describe(product="T√™n source", quantity="S·ªë l∆∞·ª£ng m·ªõi")
async def update_source(interaction: discord.Interaction, product: str, quantity: int):
    if interaction.user.id != ADMIN_ID:
        await interaction.response.send_message("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return
    
    if quantity < 0:
        await interaction.response.send_message("‚ö† S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!", ephemeral=True)
        return
    
    source_data = load_json(SOURCE_FILE)
    source_data[product] = quantity
    save_json(SOURCE_FILE, source_data)

    embed = discord.Embed(
        title="‚úÖ C·∫≠p Nh·∫≠t Source Th√†nh C√¥ng!",
        description=f"üîπ **{product}**: C√≤n `{quantity}` c√°i trong kho.",
        color=discord.Color.green()
    )
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f'‚úÖ Bot {bot.user} ƒë√£ s·∫µn s√†ng!')

bot.run(TOKEN)
